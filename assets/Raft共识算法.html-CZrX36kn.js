import{_ as i,c as e,a,o as n}from"./app-Jz7YPC49.js";const s={};function r(t,l){return n(),e("div",null,l[0]||(l[0]=[a(`<h1 id="raft共识算法" tabindex="-1"><a class="header-anchor" href="#raft共识算法"><span>Raft共识算法</span></a></h1><p>Raft共识算法是一种用于分布式系统的共识算法，它的设计目标是易于理解和实现。</p><h2 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念"><span>1. 基本概念</span></a></h2><p>Raft将一致性问题分解为三个相对独立的子问题：</p><ul><li><strong>领导人选举（Leader Election）</strong></li><li><strong>日志复制（Log Replication）</strong></li><li><strong>安全性（Safety）</strong></li></ul><h2 id="_2-节点状态" tabindex="-1"><a class="header-anchor" href="#_2-节点状态"><span>2. 节点状态</span></a></h2><p>在Raft中，所有节点都处于以下三种状态之一：</p><ul><li><strong>领导人（Leader）</strong>：处理所有客户端请求，管理日志复制</li><li><strong>跟随者（Follower）</strong>：被动接收Leader的请求</li><li><strong>候选人（Candidate）</strong>：用于选举新的Leader</li></ul><h2 id="_3-领导人选举过程" tabindex="-1"><a class="header-anchor" href="#_3-领导人选举过程"><span>3. 领导人选举过程</span></a></h2><ol><li><p><strong>初始状态</strong>：</p><ul><li>所有节点启动时都是Follower状态</li><li>每个节点维护一个选举超时计时器</li></ul></li><li><p><strong>选举触发</strong>：</p><ul><li>当Follower在选举超时时间内没有收到Leader的心跳，就会转换为Candidate</li><li>Candidate会增加自己的任期号（Term）</li><li>向其他节点发送投票请求</li></ul></li><li><p><strong>投票规则</strong>：</p><ul><li>每个节点在一个任期内只能投票给一个候选人</li><li>收到投票请求的节点会对比日志完整性，选择日志更新的候选人</li></ul></li><li><p><strong>成为Leader</strong>：</p><ul><li>获得多数票的Candidate成为新的Leader</li><li>Leader开始定期发送心跳包维护其地位</li></ul></li></ol><h2 id="_4-日志复制" tabindex="-1"><a class="header-anchor" href="#_4-日志复制"><span>4. 日志复制</span></a></h2><ol><li><p><strong>日志结构</strong>：</p><ul><li>每个日志条目包含：命令、任期号、索引号</li><li>日志按时间顺序严格编号</li></ul></li><li><p><strong>复制过程</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Client    Leader    Followers</span>
<span class="line">   |         |          |</span>
<span class="line">   X--------&gt;|          |    1. Leader接收客户端请求</span>
<span class="line">   |         |          |</span>
<span class="line">   |         X---------&gt;|    2. Leader追加日志条目</span>
<span class="line">   |         |&lt;---------X    3. Followers确认接收</span>
<span class="line">   |         |          |</span>
<span class="line">   |         X---------&gt;|    4. Leader确认提交</span>
<span class="line">   |&lt;--------X          |    5. 返回客户端结果</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>一致性保证</strong>：</p><ul><li>Leader只有在确认多数节点复制了日志后才会提交</li><li>已提交的日志在所有节点上最终会保持一致</li></ul></li></ol><h2 id="_5-安全性保证" tabindex="-1"><a class="header-anchor" href="#_5-安全性保证"><span>5. 安全性保证</span></a></h2><ol><li><p><strong>选举限制</strong>：</p><ul><li>只有包含所有已提交日志的节点才能成为Leader</li></ul></li><li><p><strong>日志匹配特性</strong>：</p><ul><li>如果两个日志条目有相同的索引和任期，则它们存储了相同的命令</li><li>如果两个日志条目有相同的索引和任期，则之前的所有日志都相同</li></ul></li></ol><h2 id="_6-在docker-swarm中的应用" tabindex="-1"><a class="header-anchor" href="#_6-在docker-swarm中的应用"><span>6. 在Docker Swarm中的应用</span></a></h2><p>Docker Swarm使用Raft来：</p><ul><li>维护集群状态的一致性</li><li>管理节点的Leader选举</li><li>确保配置更新的可靠传播</li><li>保证即使在部分节点失败的情况下系统仍能正常工作</li></ul><h2 id="_7-优点" tabindex="-1"><a class="header-anchor" href="#_7-优点"><span>7. 优点</span></a></h2><ol><li><p><strong>易于理解</strong>：</p><ul><li>算法流程清晰</li><li>子问题相对独立</li></ul></li><li><p><strong>实用性强</strong>：</p><ul><li>性能足够好</li><li>在各种异常情况下都能保持正确性</li></ul></li><li><p><strong>可靠性高</strong>：</p><ul><li>能容忍网络延迟</li><li>能处理节点宕机等故障</li></ul></li></ol><h2 id="_8-使用场景" tabindex="-1"><a class="header-anchor" href="#_8-使用场景"><span>8. 使用场景</span></a></h2><p>除了Docker Swarm，Raft还被广泛应用于：</p><ul><li>etcd</li><li>Consul</li><li>TiDB</li><li>CockroachDB 等分布式系统中</li></ul><p>通过这种设计，Raft确保了分布式系统中的数据一致性，使得像Docker Swarm这样的系统能够可靠地管理集群状态。</p>`,23)]))}const d=i(s,[["render",r],["__file","Raft共识算法.html.vue"]]),p=JSON.parse('{"path":"/Backend/docker/Raft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95.html","title":"Raft共识算法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 基本概念","slug":"_1-基本概念","link":"#_1-基本概念","children":[]},{"level":2,"title":"2. 节点状态","slug":"_2-节点状态","link":"#_2-节点状态","children":[]},{"level":2,"title":"3. 领导人选举过程","slug":"_3-领导人选举过程","link":"#_3-领导人选举过程","children":[]},{"level":2,"title":"4. 日志复制","slug":"_4-日志复制","link":"#_4-日志复制","children":[]},{"level":2,"title":"5. 安全性保证","slug":"_5-安全性保证","link":"#_5-安全性保证","children":[]},{"level":2,"title":"6. 在Docker Swarm中的应用","slug":"_6-在docker-swarm中的应用","link":"#_6-在docker-swarm中的应用","children":[]},{"level":2,"title":"7. 优点","slug":"_7-优点","link":"#_7-优点","children":[]},{"level":2,"title":"8. 使用场景","slug":"_8-使用场景","link":"#_8-使用场景","children":[]}],"git":{"updatedTime":1736305479000,"contributors":[{"name":"RuanCong","username":"RuanCong","email":"1308811723@qq.com","commits":1,"url":"https://github.com/RuanCong"}]},"filePathRelative":"Backend/docker/Raft共识算法.md"}');export{d as comp,p as data};
