import{_ as a,c as s,a as e,o as t}from"./app-BcIbsJoY.js";const o={};function i(p,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h3 id="upgrade-2-x-to-3-x" tabindex="-1"><a class="header-anchor" href="#upgrade-2-x-to-3-x"><span>upgrade 2.x to 3.x</span></a></h3><p>Core changes</p><ul><li><p>Image Banner Support Removed</p><p><code>banner.gif</code>, <code>banner.jpg</code>, and <code>banner.png</code> files are now ignored and should be replaced with a text-based <code>banner.txt</code> file.</p></li><li><p>Logging Date Format</p><p>The new default format <code>yyyy-MM-dd’T’HH:mm:ss.SSSXXX</code> uses a <code>T</code> to separate the date and time and adds the timezone offset to the end.</p><p>The <code>LOG_DATEFORMAT_PATTERN</code> environment variable or <code>logging.pattern.dateformat</code> property can be used to set the format (like previous default value: <code>yyyy-MM-dd HH:mm:ss.SSS</code>).</p></li><li><p>Auto-configuration Files</p><p>Spring Boot 2.7 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.7-Release-Notes#changes-to-auto-configuration" target="_blank" rel="noopener noreferrer">introduced</a> a new <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> file for registering auto-configurations, while maintaining backwards compatibility with registration in <code>spring.factories</code>. With this release, support for registering auto-configurations in <code>spring.factories</code> using the <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> key has been removed in favor of the imports file. Other entries in <code>spring.factories</code> under other keys are unaffected.</p></li><li><p>Spring MVC and WebFlux URL Matching Changes</p><p>以前的版本中， &quot;GET /some/greeting/&quot; 与 &quot;GET /some/greeting&quot; 会被匹配到同一个handler。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/some/greeting&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在3.x中，只有 &quot;GET /some/greeting&quot; 会被匹配到, &quot;GET /some/greeting/&quot; 为404。</p><p>如果需要兼容这个这两个路径匹配到一个handler， 可以配置</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">  <span class="token annotation punctuation">@Configuration</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">      <span class="token annotation punctuation">@Override</span></span>
<span class="line">      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      configurer<span class="token punctuation">.</span><span class="token function">setUseTrailingSlashMatch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="spring-base" tabindex="-1"><a class="header-anchor" href="#spring-base"><span>Spring base</span></a></h3><h4 id="import-、-importresource" tabindex="-1"><a class="header-anchor" href="#import-、-importresource"><span><code>@Import</code> 、<code>@ImportResource</code></span></a></h4><p>You need not put all your <code>@Configuration</code> into a single class. The <code>@Import</code> annotation can be used to import additional configuration classes.</p><p>If you absolutely must use XML based configuration, we recommend that you still start with a <code>@Configuration</code> class. You can then use an <code>@ImportResource</code> annotation to load XML configuration files.</p><h4 id="排除自动配置的类" tabindex="-1"><a class="header-anchor" href="#排除自动配置的类"><span>排除自动配置的类</span></a></h4><ul><li><code>@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class }) </code></li><li>如果类不在<code>classPath</code>上，可以 <code>excludeName</code> 属性用全限定类名进行排除</li><li>还可以使用配置文件 <code>spring.autoconfigure.exclude</code> property</li></ul><h4 id="默认的自动配置的包" tabindex="-1"><a class="header-anchor" href="#默认的自动配置的包"><span>默认的自动配置的包</span></a></h4><p>申明<code>@SpringBootApplication</code>的类所在的包就是默认的参与自动配置的包。如果想要额外的其它包，可以使用<code>@AutoConfigurationPackage</code> 进行声明</p><h4 id="spring-beans的注入" tabindex="-1"><a class="header-anchor" href="#spring-beans的注入"><span>spring beans的注入</span></a></h4><p>推荐使用构造函数进行注入。如果有多个构造函数，你需要在你想的那个上使用<code>@Autowired</code>。并声明为<code>final</code>。例如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccountService</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyAccountService</span><span class="token punctuation">(</span><span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyAccountService</span><span class="token punctuation">(</span><span class="token class-name">RiskAssessor</span> riskAssessor<span class="token punctuation">,</span> <span class="token class-name">PrintStream</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> out<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication"><span><code>@SpringBootApplication</code></span></a></h4><p>单个 <code>@SpringBootApplication</code> 可以包括这三个注解的作用</p><ul><li><code>@EnableAutoConfiguration</code></li></ul><ul><li><code>@ComponentScan</code></li><li><code>@SpringBootConfiguration</code></li></ul><h4 id="关闭启动日志" tabindex="-1"><a class="header-anchor" href="#关闭启动日志"><span>关闭启动日志</span></a></h4><p><code>spring.main.log-startup-info</code> 配置</p><h4 id="liveness-state-与-readiness-state" tabindex="-1"><a class="header-anchor" href="#liveness-state-与-readiness-state"><span>Liveness State 与 Readiness State</span></a></h4><p>Liveness State 代表 springboot 应用内部的状态：通常与 <code>ApplicationContext</code> 是否初始化完成相关</p><p>Readiness State 代表 springboot 应用是可以正常处理正常业务：通常 <code>CommandLineRunner</code> and <code>ApplicationRunner</code> 处理完成后</p><p>可以通过代码主动通报应用的状态</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">AvailabilityChangeEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">LivenessState</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationEventPublisher</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocalCacheVerifier</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationEventPublisher</span> eventPublisher<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyLocalCacheVerifier</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span> eventPublisher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher <span class="token operator">=</span> eventPublisher<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CacheCompletelyBrokenException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">AvailabilityChangeEvent</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token class-name">LivenessState</span><span class="token punctuation">.</span><span class="token constant">BROKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="当应用启动后要完成某个任务" tabindex="-1"><a class="header-anchor" href="#当应用启动后要完成某个任务"><span>当应用启动后要完成某个任务</span></a></h4><p>Tasks expected to run during startup should be executed by <code>CommandLineRunner</code> and <code>ApplicationRunner</code> components instead of using Spring component lifecycle callbacks such as <code>@PostConstruct</code>.</p><h4 id="事件与监听器" tabindex="-1"><a class="header-anchor" href="#事件与监听器"><span>事件与监听器</span></a></h4><p>注册监听器</p><ul><li><p>在<code>ApplicationContext</code>创建完成之前的事件，绑定方式<code>SpringApplication.addListeners(…)</code>或<code>SpringApplicationBuilder.listeners(…)</code>;</p></li><li><p>在<code>ApplicationContext</code>创建完后的事件，可以通过<code>@EventListener</code>去监听；</p></li><li><p>在<code>META-INF/spring.factories</code>文件中增加<code>org.springframework.context.ApplicationListener=com.example.project.MyListener</code>, 通过这种方式会被自动注册</p></li></ul><blockquote><p>Event listeners should not run potentially lengthy tasks as they execute in the same thread by default. Consider using <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.command-line-runner" target="_blank" rel="noopener noreferrer">application and command-line runners</a> instead.</p></blockquote><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h4><blockquote><p>It is recommended to stick with one format for your entire application. If you have configuration files with both <code>.properties</code> and YAML format in the same location, <code>.properties</code> takes precedence.</p></blockquote><h5 id="json-application-properties" tabindex="-1"><a class="header-anchor" href="#json-application-properties"><span>JSON Application Properties</span></a></h5><p>当有一些配置文件key名字无法在环境变量生效时。可以用inline json 这种方式来设置：</p><p><code>java -Dspring.application.json=&#39;{&quot;my&quot;:{&quot;name&quot;:&quot;test&quot;}}&#39; -jar myapp.jar</code>、<code>java -Dspring.application.json=&#39;{&quot;my&quot;:{&quot;name&quot;:&quot;test&quot;}}&#39; -jar myapp.jar</code>、<code>java -jar myapp.jar --spring.application.json=&#39;{&quot;my&quot;:{&quot;name&quot;:&quot;test&quot;}}&#39;</code>。 这样<code>my.name=test</code>就会加入spring environment中。这种方式也支持设置<code>null</code>值</p><h5 id="设置配置文件路径" tabindex="-1"><a class="header-anchor" href="#设置配置文件路径"><span>设置配置文件路径</span></a></h5><p>默认搜寻配置文件的地方：</p><ol><li>From the classpath 【项目内的classpath地址】 <ol><li>The classpath root</li><li>The classpath <code>/config</code> package</li></ol></li><li>From the current directory 【打包后jar包所在的位置】 <ol><li>The current directory</li><li>The <code>config/</code> subdirectory in the current directory</li><li>Immediate child directories of the <code>config/</code> subdirectory</li></ol></li></ol><p>用<code>spring.config.name</code>配置项来修改默认的配置的文件名【<code>application</code>】</p><p>用<code>spring.config.location</code>配置项来指定配置文件地址，</p><ul><li>多个可以用逗号来隔开, 同一个配置项后面的优先级高于前面的；</li><li>多个也可以用分号来隔开，但是表示它们是同一个级别</li><li>它可以配置文件夹，但是要以<code>/</code>结尾。还可以使用通配符<code>/config/*/</code>。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">java</span> <span class="token parameter variable">-jar</span> myproject.jar <span class="token parameter variable">--spring.config.location</span><span class="token operator">=</span><span class="token punctuation">\\</span></span>
<span class="line">    optional:classpath:/default.properties,<span class="token punctuation">\\</span></span>
<span class="line">    optional:classpath:/override.properties</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>spring.config.additional-location</code> 是配置额外的地址，原来的默认的地址不会被覆盖</p><blockquote><p>Use the prefix <code>optional:</code> if the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.optional-prefix" target="_blank" rel="noopener noreferrer">locations are optional</a> and you do not mind if they do not exist.</p></blockquote><blockquote><p>注意：<code>spring.config.name</code>, <code>spring.config.location</code>, and <code>spring.config.additional-location</code> are used very early to determine which files have to be loaded. They must be defined as an environment property (typically an <strong>OS environment variable, a system property, or a command-line argument</strong>).</p></blockquote><p>优先级例子</p><blockquote><p>The last-wins strategy applies at the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.location-groups" target="_blank" rel="noopener noreferrer">location group</a> level. A <code>spring.config.location</code> of <code>classpath:/cfg/,classpath:/ext/</code> will not have the same override rules as <code>classpath:/cfg/;classpath:/ext/</code>.</p><p>For example, continuing our <code>prod,live</code> example above, we might have the following files:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/cfg</span>
<span class="line">  application-live.properties</span>
<span class="line">/ext</span>
<span class="line">  application-live.properties</span>
<span class="line">  application-prod.properties</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we have a <code>spring.config.location</code> of <code>classpath:/cfg/,classpath:/ext/</code> we process all <code>/cfg</code> files before all <code>/ext</code> files:</p><ol><li><code>/cfg/application-live.properties</code></li><li><code>/ext/application-prod.properties</code></li><li><code>/ext/application-live.properties</code></li></ol><p>会先加载/cfg/里的文件，再加载/ext/里的文件</p><p>When we have <code>classpath:/cfg/;classpath:/ext/</code> instead (with a <code>;</code> delimiter) we process <code>/cfg</code> and <code>/ext</code> at the same level:</p><ol><li><code>/ext/application-prod.properties</code></li><li><code>/cfg/application-live.properties</code></li><li><code>/ext/application-live.properties</code></li></ol><p>因为是同一个级别，所以会按profile设置来加载，先加载-prod的文件，再加载-live的文件</p></blockquote><h5 id="引入额外的配置文件" tabindex="-1"><a class="header-anchor" href="#引入额外的配置文件"><span>引入额外的配置文件</span></a></h5><p><code>spring.config.import</code></p><div class="language-spring.config.import=optional line-numbers-mode" data-highlighter="prismjs" data-ext="spring.config.import=optional" data-title="spring.config.import=optional"><pre><code><span class="line"></span>
<span class="line"></span>
<span class="line">##### 配置随机值</span>
<span class="line"></span>
<span class="line">\`\`\`properties</span>
<span class="line">my.secret=\${random.value}</span>
<span class="line">my.number=\${random.int}</span>
<span class="line">my.bignumber=\${random.long}</span>
<span class="line">my.uuid=\${random.uuid}</span>
<span class="line">my.number-less-than-ten=\${random.int(10)}</span>
<span class="line">my.number-in-range=\${random.int[1024,65536]}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="设置系统环境变量统一前缀" tabindex="-1"><a class="header-anchor" href="#设置系统环境变量统一前缀"><span>设置系统环境变量统一前缀</span></a></h5><p>可以直接通过<code>SpringApplication.setEnvironmentPrefix</code>方法来设置。</p><blockquote><p>For example, if you set the prefix to <code>input</code>, a property such as <code>remote.timeout</code> will also be resolved as <code>input.remote.timeout</code> in the system environment.</p></blockquote><h5 id="单一文件中实现多个文件的作用" tabindex="-1"><a class="header-anchor" href="#单一文件中实现多个文件的作用"><span>单一文件中实现多个文件的作用</span></a></h5><p>在YAML 中使用三个连接符来进行分割 <code>---</code></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;MyApp&quot;</span></span>
<span class="line"><span class="token punctuation">---</span></span>
<span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&quot;MyCloudApp&quot;</span></span>
<span class="line">  <span class="token key atrule">config</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">activate</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">on-cloud-platform</span><span class="token punctuation">:</span> <span class="token string">&quot;kubernetes&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>.properties</code> 中用 <code>#---</code> 或者<code>!---</code> 来进行分割</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span></span>
<span class="line"><span class="token comment">#---</span></span>
<span class="line"><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyCloudApp</span></span>
<span class="line"><span class="token key attr-name">spring.config.activate.on-cloud-platform</span><span class="token punctuation">=</span><span class="token value attr-value">kubernetes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>@PropertySource </code> 和<code>@TestPropertySource</code> 是不能加载这种被分割的配置文件的。</p><p>分割符的前面不能有空格。上下行也不能有相同的其它分隔符</p></blockquote><h5 id="不同环境激活不同的配置" tabindex="-1"><a class="header-anchor" href="#不同环境激活不同的配置"><span>不同环境激活不同的配置</span></a></h5><p>用 <code>spring.config.activate.*</code> 来进行配置</p><table><thead><tr><th style="text-align:left;">Property</th><th style="text-align:left;">Note</th></tr></thead><tbody><tr><td style="text-align:left;"><code>on-profile</code></td><td style="text-align:left;">A profile expression that must match for the document to be active.</td></tr><tr><td style="text-align:left;"><code>on-cloud-platform</code></td><td style="text-align:left;">The <code>CloudPlatform</code> that must be detected for the document to be active.</td></tr></tbody></table><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">myprop</span><span class="token punctuation">=</span><span class="token value attr-value">always-set</span></span>
<span class="line"><span class="token comment">#---</span></span>
<span class="line"><span class="token key attr-name">spring.config.activate.on-cloud-platform</span><span class="token punctuation">=</span><span class="token value attr-value">kubernetes</span></span>
<span class="line"><span class="token key attr-name">spring.config.activate.on-profile</span><span class="token punctuation">=</span><span class="token value attr-value">prod | staging</span></span>
<span class="line"><span class="token key attr-name">myotherprop</span><span class="token punctuation">=</span><span class="token value attr-value">sometimes-set</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="解析yaml-文件" tabindex="-1"><a class="header-anchor" href="#解析yaml-文件"><span>解析YAML 文件</span></a></h5><p><code>@PropertySource</code> 和<code>@PropertySource</code>不能加载 YAML 文件, 它们只能加载<code>.properties</code>文件。<code>YamlPropertiesFactoryBean </code>与<code>YamlPropertiesFactoryBean</code> 可以申明为Bean去直接加载YAML文件</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">YamlPropertiesFactoryBean</span> <span class="token function">yamlProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">YamlPropertiesFactoryBean</span> yaml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlPropertiesFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        yaml<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;application.yml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> yaml<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以创建 <code>YamlPropertySourceLoader</code> 去解析YAML文件</p><h5 id="激活-configurationproperties" tabindex="-1"><a class="header-anchor" href="#激活-configurationproperties"><span>激活 <code>@ConfigurationProperties</code></span></a></h5><p>要激活自定义的配置文件。需要将它们申明为spring Bean。可以直接使用 <code>@Component</code> 等注解或scan的方式进行注册。</p><p>但是在按条件进行注册的场景下，就可以用<code>@ConfigurationProperties</code> 进行注册。<code>@ConfigurationProperties</code> 可以与任何 <code>@Configuration</code> 注解下联合使命。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">SomeProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;some.properties&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeProperties</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用 <code>@ConfigurationPropertiesScan</code> 进行扫描注册</p><h5 id="配置第三方包里的配置类" tabindex="-1"><a class="header-anchor" href="#配置第三方包里的配置类"><span>配置第三方包里的配置类</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdPartyConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;another&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">AnotherComponent</span> <span class="token function">anotherComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnotherComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="绑定到map类型" tabindex="-1"><a class="header-anchor" href="#绑定到map类型"><span>绑定到Map类型</span></a></h5><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">my.map.[/key1]</span><span class="token punctuation">=</span><span class="token value attr-value">value1</span></span>
<span class="line"><span class="token key attr-name">my.map.[/key2]</span><span class="token punctuation">=</span><span class="token value attr-value">value2</span></span>
<span class="line"><span class="token key attr-name">my.map./key3</span><span class="token punctuation">=</span><span class="token value attr-value">value3</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">my</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">map</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">&quot;[/key1]&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value1&quot;</span></span>
<span class="line">    <span class="token key atrule">&quot;[/key2]&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value2&quot;</span></span>
<span class="line">    <span class="token key atrule">&quot;/key3&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;value3&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The properties above will bind to a <code>Map</code> with <code>/key1</code>, <code>/key2</code> and <code>key3</code> as the keys in the map. The slash has been removed from <code>key3</code> because it was not surrounded by square brackets.</p><blockquote><p>For YAML files, the brackets need to be surrounded by quotes for the keys to be parsed properly.</p></blockquote><h5 id="绑定系统环境变量" tabindex="-1"><a class="header-anchor" href="#绑定系统环境变量"><span>绑定系统环境变量</span></a></h5><p>For example, the configuration property <code>spring.main.log-startup-info</code> would be an environment variable named <code>SPRING_MAIN_LOGSTARTUPINFO</code>.</p><p>For example, the configuration property <code>my.service[0].other</code> would use an environment variable named <code>MY_SERVICE_0_OTHER</code>.</p><h5 id="检验" tabindex="-1"><a class="header-anchor" href="#检验"><span>检验</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my.service&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Validated</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProperties</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">InetAddress</span> remoteAddress<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Valid</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Security</span> security <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Security</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// getters/setters...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Security</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token annotation punctuation">@NotEmpty</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// getters/setters...</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>To ensure that validation is always triggered for nested properties, even when no properties are found, the associated field must be annotated with <code>@Valid</code>.</p></blockquote><h3 id="spring-mvc" tabindex="-1"><a class="header-anchor" href="#spring-mvc"><span>Spring MVC</span></a></h3><h4 id="httpmessageconverters-与-conversionservice" tabindex="-1"><a class="header-anchor" href="#httpmessageconverters-与-conversionservice"><span>HttpMessageConverters 与 ConversionService</span></a></h4><table><thead><tr><th><strong>特性</strong></th><th><strong>HttpMessageConverters</strong></th><th><strong>ConversionService</strong></th></tr></thead><tbody><tr><td><strong>主要用途</strong></td><td>HTTP 请求/响应体的序列化与反序列化（如 JSON、XML）</td><td>通用类型转换（如字符串到数字、日期，或自定义类型）</td></tr><tr><td><strong>使用场景</strong></td><td>@RequestBody、@ResponseBody、REST API</td><td>@RequestParam、@PathVariable、@ModelAttribute</td></tr><tr><td><strong>输入/输出</strong></td><td>HTTP 消息（请求体/响应体）</td><td>Java 对象、字符串、属性值</td></tr><tr><td><strong>核心接口</strong></td><td>HttpMessageConverter</td><td>ConversionService</td></tr><tr><td><strong>内置实现</strong></td><td>MappingJackson2HttpMessageConverter 等</td><td>DefaultConversionService</td></tr><tr><td><strong>媒体类型支持</strong></td><td>支持特定媒体类型（如 application/json）</td><td>不依赖媒体类型，专注于 Java 类型转换</td></tr><tr><td><strong>自定义方式</strong></td><td>实现 HttpMessageConverter 或配置 WebMvcConfigurer</td><td>实现 Converter 或注册到 ConversionService</td></tr><tr><td><strong>Spring Boot 配置</strong></td><td>自动配置，依赖类路径（如 Jackson、Gson）</td><td>自动配置，集成到数据绑定流程</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToLocalDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">LocalDate</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义转化器如果是声明了<code>@Component</code>会自动会注册到ConversionService内。还可以手注册：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConversionConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConversionService</span> <span class="token function">conversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">DefaultConversionService</span> conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 可以手动添加转换器（如果需要）</span></span>
<span class="line">        conversionService<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringToLocalDateConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        conversionService<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringToUserRoleConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> conversionService<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Spring Boot 默认提供一个全局的 ConversionService（名为 conversionService 的 Bean）。</p><p>如果你手动定义了一个自定义 ConversionService（如通过 @Bean 方法），Spring Boot 会使用你的自定义实例，而不会自动注册所有的 Converter。在这种情况下，你需要手动添加 Converter</p></blockquote><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h3><p>如果不想要默认的日志输出不打印应用名，可以通过 <code>logging.include-application-name</code> 来进行关闭</p><h4 id="打开调试模式" tabindex="-1"><a class="header-anchor" href="#打开调试模式"><span>打开调试模式</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">java</span> <span class="token parameter variable">-jar</span> myapp.jar <span class="token parameter variable">--debug</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开了调试模式并不意味着会打印应用中 DEBUGE 级别的日志。需要额外设置 <code>logging.level</code></p><p>还可以通过 <code> --trace</code> 来进行跟踪</p><h4 id="日志分组" tabindex="-1"><a class="header-anchor" href="#日志分组"><span>日志分组</span></a></h4><p>进行分组：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment">## 分组</span></span>
<span class="line"><span class="token key attr-name">logging.group.tomcat</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span></span>
<span class="line"><span class="token comment">## 应用分组</span></span>
<span class="line"><span class="token key attr-name">logging.level.tomcat</span><span class="token punctuation">=</span><span class="token value attr-value">trace</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>springboot中内置的分组</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Loggers</th></tr></thead><tbody><tr><td style="text-align:left;">web</td><td style="text-align:left;"><code>org.springframework.core.codec</code>, <code>org.springframework.http</code>, <code>org.springframework.web</code>, <code>org.springframework.boot.actuate.endpoint.web</code>, <code>org.springframework.boot.web.servlet.ServletContextInitializerBeans</code></td></tr><tr><td style="text-align:left;">sql</td><td style="text-align:left;"><code>org.springframework.jdbc.core</code>, <code>org.hibernate.SQL</code>, <code>org.jooq.tools.LoggerListener</code></td></tr></tbody></table><h4 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置"><span>自定义配置</span></a></h4><p>可以用<code>org.springframework.boot.logging.LoggingSystem</code> 系统变量来设置用的日志系统。</p><blockquote><p>Since logging is initialized <strong>before</strong> the <code>ApplicationContext</code> is created, it is not possible to control logging from <code>@PropertySources</code> in Spring <code>@Configuration</code> files. The only way to change the logging system or disable it entirely is through System properties.</p></blockquote><p>用 logback 时，using logback-spring.xml rather than logback.xml</p><h4 id="file-output" tabindex="-1"><a class="header-anchor" href="#file-output"><span>File Output</span></a></h4><p><code>logging.file.name</code> 和 <code>logging.file.path</code> 可以设置日志文件的输出位置。If both properties are set, logging.file.path is ignored and only logging.file.name is used.</p><p>The following table shows how the <code>logging.*</code> properties can be used together:</p><table><thead><tr><th style="text-align:left;"><code>logging.file.name</code></th><th style="text-align:left;"><code>logging.file.path</code></th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><em>(none)</em></td><td style="text-align:left;"><em>(none)</em></td><td style="text-align:left;">Console only logging.</td></tr><tr><td style="text-align:left;">Specific file (for example, <code>my.log</code>)</td><td style="text-align:left;"><em>(none)</em></td><td style="text-align:left;">Writes to the location specified by <code>logging.file.name</code>. The location can be absolute or relative to the current directory.</td></tr><tr><td style="text-align:left;"><em>(none)</em></td><td style="text-align:left;">Specific directory (for example, <code>/var/log</code>)</td><td style="text-align:left;">Writes <code>spring.log</code> to the directory specified by <code>logging.file.path</code>. The directory can be absolute or relative to the current directory.</td></tr><tr><td style="text-align:left;">Specific file</td><td style="text-align:left;">Specific directory</td><td style="text-align:left;">Writes to the location specified by <code>logging.file.name</code> and ignores <code>logging.file.path</code>. The location can be absolute or relative to the current directory.</td></tr></tbody></table><blockquote><p><code>logging.file.name</code> 配置输出到某个目录时，需要提前创建该目录，否则该日志文件不会生成</p></blockquote><h4 id="file-rotation" tabindex="-1"><a class="header-anchor" href="#file-rotation"><span>File Rotation</span></a></h4><p>If you are using the Logback, it is possible to fine-tune log rotation settings using your <code>application.properties</code> or <code>application.yaml</code> file.</p><p>The following rotation policy properties are supported:</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td style="text-align:left;">The filename pattern used to create log archives.</td></tr><tr><td style="text-align:left;"><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td style="text-align:left;">If log archive cleanup should occur when the application starts.</td></tr><tr><td style="text-align:left;"><code>logging.logback.rollingpolicy.max-file-size</code></td><td style="text-align:left;">The maximum size of log file before it is archived.</td></tr><tr><td style="text-align:left;"><code>logging.logback.rollingpolicy.total-size-cap</code></td><td style="text-align:left;">The maximum amount of size log archives can take before being deleted.</td></tr><tr><td style="text-align:left;"><code>logging.logback.rollingpolicy.max-history</code></td><td style="text-align:left;">The maximum number of archive log files to keep (defaults to 7).</td></tr></tbody></table><h4 id="structured-logging" tabindex="-1"><a class="header-anchor" href="#structured-logging"><span>Structured Logging</span></a></h4><p>Structured logging is a technique where the log output is written in a well-defined, often <strong>machine-readable</strong> format.</p><ol><li><p>在logback-spring.xml中配置</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token comment">&lt;!-- replace your encoder with StructuredLogEncoder --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.boot.logging.logback.StructuredLogEncoder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">&gt;</span></span>\${CONSOLE_LOG_STRUCTURED_FORMAT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>\${CONSOLE_LOG_CHARSET}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其中CONSOLE_LOG_STRUCTURED_FORMAT的值 可以是【ecs, gelf, logstash】</p></blockquote></li><li><p>配置文件里配置</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">logging.structured.format.console</span><span class="token punctuation">=</span><span class="token value attr-value">ecs</span></span>
<span class="line"><span class="token key attr-name">logging.structured.format.file</span><span class="token punctuation">=</span><span class="token value attr-value">ecs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="profile-specific-configuration" tabindex="-1"><a class="header-anchor" href="#profile-specific-configuration"><span>Profile-specific Configuration</span></a></h4><p>根据spring特定的profile来生效不同的配置项</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dev | staging<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token comment">&lt;!-- configuration to be enabled when the &quot;dev&quot; or &quot;staging&quot; profiles are active --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!production<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token comment">&lt;!-- configuration to be enabled when the &quot;production&quot; profile is not active --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="environment-properties" tabindex="-1"><a class="header-anchor" href="#environment-properties"><span>Environment Properties</span></a></h4><p>The <code>&lt;springProperty&gt;</code> tag lets you expose properties from the Spring <a href="https://docs.spring.io/spring-framework/docs/6.2.x/javadoc-api/org/springframework/core/env/Environment.html" target="_blank" rel="noopener noreferrer"><code>Environment</code></a> for use within Logback.</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProperty</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>context<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fluentHost<span class="token punctuation">&quot;</span></span> <span class="token attr-name">source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myapp.fluentd.host<span class="token punctuation">&quot;</span></span></span>
<span class="line">		<span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>FLUENT<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.more.appenders.DataFluentAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remoteHost</span><span class="token punctuation">&gt;</span></span>\${fluentHost}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>remoteHost</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	...</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The source must be specified in <strong>kebab case</strong> (such as my.property-name). However, properties can be added to the Environment by using the relaxed rules.</p></blockquote><h3 id="i18n" tabindex="-1"><a class="header-anchor" href="#i18n"><span>i18n</span></a></h3><p>The auto-configuration applies when the default properties file for the configured resource bundle is available (<code>messages.properties</code> by default).默认情况下有这个文件时<code>/resources/messages.properties</code>会自动配置<code>MessageSource</code></p><p>当设置 <code>spring.messages.basename=i18n.messages</code> 其中<code>i18n</code>是匹配文件夹名，<code>messages</code>匹配文件名。这时候会去匹配<code>/resources/i18n/message.properties文件</code></p><h4 id="配置语言切换" tabindex="-1"><a class="header-anchor" href="#配置语言切换"><span>配置语言切换</span></a></h4><p>默认配置下，是可以通过请求头（Accept-Language）来切换语言的，是通过<code>AcceptHeaderLocaleResolver</code>来解析的。</p><p>通过参数来切换语言</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocaleConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">LocaleResolver</span> <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SessionLocaleResolver</span> slr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SessionLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 默认语言</span></span>
<span class="line">        slr<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> slr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">LocaleChangeInterceptor</span> <span class="token function">localeChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LocaleChangeInterceptor</span> lci <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocaleChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// URL 参数名，例如 ?lang=zh_CN</span></span>
<span class="line">        lci<span class="token punctuation">.</span><span class="token function">setParamName</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> lci<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">localeChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果既想第一次接受请求头（Accept-Language），又想支持通过参数来切换，则需要自定义实现<code>AcceptHeaderLocaleResolver</code></p></blockquote><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>By default, <code>@SpringBootTest</code> does not start the server but instead sets up a mock environment for testing web endpoints.</p><p>在 <code>@SpringBootTest</code> 中不设置 <code>webEnvironment</code> 的值时，默认为 <code>MOCK</code> ，这时并不会自动启动内置的web 服务器。</p><h4 id="配置测试专用的配置" tabindex="-1"><a class="header-anchor" href="#配置测试专用的配置"><span>配置测试专用的配置</span></a></h4><p>测试类默认会在搜索<code>@SpringBootApplication</code> 当作主配置类。</p><p>如果测试需要声明独用的配置，可以使用内部类【非top level的配置类】，用 <code>@TestConfiguration</code> 来进行配置</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 为当前测试方法所在主类的内部类    </span></span>
<span class="line"><span class="token annotation punctuation">@TestConfiguration</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerTestStudentConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;测试专用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> student<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这时候需要注意的是业务代码中不能有相同的Student Bean的配置。除非allow-bean-definition-overriding: true</p></blockquote><p>用内部类时，不需要通过<code>@Import(OuterTestStudentConfig.class)</code>引入，而做为top-level的配置类时，就需要通过<code>Import</code>进行引入。内部类的优先级最高。</p><h4 id="使用main方法内的逻辑" tabindex="-1"><a class="header-anchor" href="#使用main方法内的逻辑"><span>使用main方法内的逻辑</span></a></h4><p><code>@SpringBootTest(useMainMethod = UseMainMethod.ALWAYS)</code> 这样设置的话，也会调用<code>@SpringBootApplication</code>标记的main方法内的逻辑</p><h4 id="使用启动参数" tabindex="-1"><a class="header-anchor" href="#使用启动参数"><span>使用启动参数</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>args <span class="token operator">=</span> <span class="token string">&quot;--app.test=one&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyApplicationArgumentTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">applicationArgumentsPopulated</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">assertThat</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getOptionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string">&quot;app.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">assertThat</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">&quot;app.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试在一个真实启动的服务器上" tabindex="-1"><a class="header-anchor" href="#测试在一个真实启动的服务器上"><span>测试在一个真实启动的服务器上</span></a></h4><p><code>@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyRandomPortTestRestTemplateTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">exampleTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">TestRestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> body <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">assertThat</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试mockmvc" tabindex="-1"><a class="header-anchor" href="#测试mockmvc"><span>测试MockMVC</span></a></h4><div class="language-JAVA line-numbers-mode" data-highlighter="prismjs" data-ext="JAVA" data-title="JAVA"><pre><code><span class="line">@SpringBootTest</span>
<span class="line">@AutoConfigureMockMvc</span>
<span class="line">class MyMockMvcTests {</span>
<span class="line"></span>
<span class="line">    @Test</span>
<span class="line">    void testWithMockMvc(@Autowired MockMvc mvc) throws Exception {</span>
<span class="line">        mvc.perform(MockMvcRequestBuilders.get(&quot;/test2&quot;))</span>
<span class="line">                .andExpect(status().isOk())</span>
<span class="line">                .andExpect(content().string(&quot;hello world2&quot;));</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况不会真正启动一个web environment 。但会构建一个完整的<code>applicationContext</code>.</p><h4 id="测试webmvc" tabindex="-1"><a class="header-anchor" href="#测试webmvc"><span>测试WebMVC</span></a></h4><p><code>@MockBean</code>不会在<code>springContext</code>中初始化相应的<code>Bean</code></p><div class="language-JAVA line-numbers-mode" data-highlighter="prismjs" data-ext="JAVA" data-title="JAVA"><pre><code><span class="line">@WebMvcTest(UserVehicleController.class)</span>
<span class="line">class MyControllerTests {</span>
<span class="line"></span>
<span class="line">    @Autowired</span>
<span class="line">    private MockMvc mvc;</span>
<span class="line"></span>
<span class="line">    @MockBean</span>
<span class="line">    private UserVehicleService userVehicleService;</span>
<span class="line"></span>
<span class="line">    @Test</span>
<span class="line">    void testExample() throws Exception {</span>
<span class="line">        given(this.userVehicleService.getVehicleDetails(&quot;sboot&quot;))</span>
<span class="line">            .willReturn(new VehicleDetails(&quot;Honda&quot;, &quot;Civic&quot;));</span>
<span class="line">        this.mvc.perform(get(&quot;/sboot/vehicle&quot;).accept(MediaType.TEXT_PLAIN))</span>
<span class="line">            .andExpect(status().isOk())</span>
<span class="line">            .andExpect(content().string(&quot;Honda Civic&quot;));</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义自动配置" tabindex="-1"><a class="header-anchor" href="#自定义自动配置"><span>自定义自动配置</span></a></h3><h4 id="自动配置类" tabindex="-1"><a class="header-anchor" href="#自动配置类"><span>自动配置类</span></a></h4><p><code>@AutoConfiguration</code> 用来标注需要自己配置的类。用于自动配置的类最好放在一个指定的特定的包类。被<code>@AutoConfiguration</code>配置了的类不会成为springboot 自动扫描的对象，它们只能通过在这个文件<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>内申明，每一行一个类，例如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mycorp<span class="token punctuation">.</span>libx<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span>LibXAutoConfiguration</span></span>
<span class="line"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mycorp<span class="token punctuation">.</span>libx<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span>LibXWebAutoConfiguration</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>springboot中的默认自动配置类<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></p></blockquote><p>如果需要对加载顺序有要求，可以通过<code>before</code>, <code>beforeName</code>, <code>after</code> and <code>afterName</code> 属性来配置； 或者 <code>@AutoConfigureBefore</code> and <code>@AutoConfigureAfter</code> 注解</p><h4 id="依条件注入" tabindex="-1"><a class="header-anchor" href="#依条件注入"><span>依条件注入</span></a></h4><h5 id="class-conditions" tabindex="-1"><a class="header-anchor" href="#class-conditions"><span>Class Conditions</span></a></h5><p><code>@ConditionalOnClass</code></p><h5 id="bean-conditions" tabindex="-1"><a class="header-anchor" href="#bean-conditions"><span>Bean Conditions</span></a></h5><p><code>@ConditionalOnMissingBean</code></p><p><code>@ConditionalOnBean</code></p><blockquote><p><code>@ConditionalOnBean</code> and <code>@ConditionalOnMissingBean</code> do not prevent <code>@Configuration</code> classes from being created.</p></blockquote><h5 id="property-conditions" tabindex="-1"><a class="header-anchor" href="#property-conditions"><span>Property Conditions</span></a></h5><p><code>@ConditionalOnProperty</code></p><h5 id="resource-conditions" tabindex="-1"><a class="header-anchor" href="#resource-conditions"><span>Resource Conditions</span></a></h5><p><code>@ConditionalOnResource</code></p><p>Resources can be specified by using the usual Spring conventions, as shown in the following example: <code>file:/home/user/test.dat</code>.</p><h5 id="web-application-conditions" tabindex="-1"><a class="header-anchor" href="#web-application-conditions"><span>Web Application Conditions</span></a></h5><p><code>@ConditionalOnWebApplication</code></p><p><code>@ConditionalOnNotWebApplication</code></p><h5 id="spel-expression-conditions" tabindex="-1"><a class="header-anchor" href="#spel-expression-conditions"><span>SpEL Expression Conditions</span></a></h5><p><code>@ConditionalOnExpression</code></p><blockquote><p>The <code>@ConditionalOnExpression</code> annotation lets configuration be included based on the result of a <a href="https://docs.spring.io/spring-framework/reference/6.1/core/expressions.html" target="_blank" rel="noopener noreferrer">SpEL expression</a>.</p></blockquote><h4 id="创建自己的starter" tabindex="-1"><a class="header-anchor" href="#创建自己的starter"><span>创建自己的Starter</span></a></h4><p>Concretely, a custom starter can contain the following:</p><ul><li>The <code>autoconfigure</code> module that contains the auto-configuration code for &quot;acme&quot;.</li><li>The <code>starter</code> module that provides a dependency to the <code>autoconfigure</code> module as well as &quot;acme&quot; and any additional dependencies that are typically useful. In a nutshell, adding the starter should provide everything needed to start using that library.</li></ul><p>不一定要把这两个模块分开来。如果自定义的这个starter包没有可选的特性，可以定义在一起</p><h5 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h5><p>命名不要以 <code>spring-boot</code> 开头</p><p>假如创建的是&quot;acme&quot; starter</p><p>命名auto-configure 模块为 <code>acme-spring-boot</code></p><p>命名 starter 模块为 <code>acme-spring-boot-starter</code></p><p>如果是两个模块合并成一个那么就直接命名为 <code>acme-spring-boot-starter</code></p><h5 id="配置keys" tabindex="-1"><a class="header-anchor" href="#配置keys"><span>配置keys</span></a></h5><p>If your starter provides configuration keys, use a unique namespace for them. In particular, do not include your keys in the namespaces that Spring Boot uses (such as <code>server</code>, <code>management</code>, <code>spring</code>, and so on).</p><p>Make sure that configuration keys are documented by adding field javadoc for each property, as shown in the following example:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;acme&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcmeProperties</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Whether to check the location of acme resources.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkLocation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Timeout for establishing a connection to the acme server.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Duration</span> loginTimeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// getters/setters ...</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here are some rules we follow internally to make sure descriptions are consistent:</p><ul><li>Do not start the description by &quot;The&quot; or &quot;A&quot;.</li><li>For <code>boolean</code> types, start the description with &quot;Whether&quot; or &quot;Enable&quot;.</li><li>For collection-based types, start the description with &quot;Comma-separated list&quot;</li><li>Use <code>java.time.Duration</code> rather than <code>long</code> and describe the default unit if it differs from milliseconds, such as &quot;If a duration suffix is not specified, seconds will be used&quot;.</li><li>Do not provide the default value in the description unless it has to be determined at runtime.</li></ul><h5 id="the-autoconfigure-module" tabindex="-1"><a class="header-anchor" href="#the-autoconfigure-module"><span>The “autoconfigure” Module</span></a></h5><p>The <code>autoconfigure</code> module contains everything that is necessary to get started with the library. It may also contain configuration key definitions (such as <code>@ConfigurationProperties</code>) and any callback interface that can be used to further customize how the components are initialized.</p><p>When building with Maven, it is recommended to add the following dependency in a module that contains auto-configurations:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="starter-module" tabindex="-1"><a class="header-anchor" href="#starter-module"><span>Starter Module</span></a></h5><p>The starter is really an <strong>empty</strong> jar. Its only purpose is to provide the necessary dependencies to work with the library. You can think of it as an opinionated view of what is required to get started.</p><h3 id="actuator-模块" tabindex="-1"><a class="header-anchor" href="#actuator-模块"><span>Actuator 模块</span></a></h3><h4 id="加入jar包" tabindex="-1"><a class="header-anchor" href="#加入jar包"><span>加入jar包</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="endpoints" tabindex="-1"><a class="header-anchor" href="#endpoints"><span>Endpoints</span></a></h4><p>The following technology-agnostic endpoints are available:</p><table><thead><tr><th style="text-align:left;">ID</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>auditevents</code></td><td style="text-align:left;">Exposes audit events information for the current application. Requires an <code>AuditEventRepository</code> bean.</td></tr><tr><td style="text-align:left;"><code>beans</code></td><td style="text-align:left;">Displays a complete list of all the Spring beans in your application.</td></tr><tr><td style="text-align:left;"><code>caches</code></td><td style="text-align:left;">Exposes available caches.</td></tr><tr><td style="text-align:left;"><code>conditions</code></td><td style="text-align:left;">Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.</td></tr><tr><td style="text-align:left;"><code>configprops</code></td><td style="text-align:left;">Displays a collated list of all <code>@ConfigurationProperties</code>. Subject to <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.sanitization" target="_blank" rel="noopener noreferrer">sanitization</a>.</td></tr><tr><td style="text-align:left;"><code>env</code></td><td style="text-align:left;">Exposes properties from Spring’s <code>ConfigurableEnvironment</code>. Subject to <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.sanitization" target="_blank" rel="noopener noreferrer">sanitization</a>.</td></tr><tr><td style="text-align:left;"><code>flyway</code></td><td style="text-align:left;">Shows any Flyway database migrations that have been applied. Requires one or more <code>Flyway</code> beans.</td></tr><tr><td style="text-align:left;"><code>health</code></td><td style="text-align:left;">Shows application health information.</td></tr><tr><td style="text-align:left;"><code>httpexchanges</code></td><td style="text-align:left;">Displays HTTP exchange information (by default, the last 100 HTTP request-response exchanges). Requires an <code>HttpExchangeRepository</code> bean.</td></tr><tr><td style="text-align:left;"><code>info</code></td><td style="text-align:left;">Displays arbitrary application info.</td></tr><tr><td style="text-align:left;"><code>integrationgraph</code></td><td style="text-align:left;">Shows the Spring Integration graph. Requires a dependency on <code>spring-integration-core</code>.</td></tr><tr><td style="text-align:left;"><code>loggers</code></td><td style="text-align:left;">Shows and modifies the configuration of loggers in the application.</td></tr><tr><td style="text-align:left;"><code>liquibase</code></td><td style="text-align:left;">Shows any Liquibase database migrations that have been applied. Requires one or more <code>Liquibase</code> beans.</td></tr><tr><td style="text-align:left;"><code>metrics</code></td><td style="text-align:left;">Shows “metrics” information for the current application.</td></tr><tr><td style="text-align:left;"><code>mappings</code></td><td style="text-align:left;">Displays a collated list of all <code>@RequestMapping</code> paths.</td></tr><tr><td style="text-align:left;"><code>quartz</code></td><td style="text-align:left;">Shows information about Quartz Scheduler jobs. Subject to <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.sanitization" target="_blank" rel="noopener noreferrer">sanitization</a>.</td></tr><tr><td style="text-align:left;"><code>scheduledtasks</code></td><td style="text-align:left;">Displays the scheduled tasks in your application.</td></tr><tr><td style="text-align:left;"><code>sessions</code></td><td style="text-align:left;">Allows retrieval and deletion of user sessions from a Spring Session-backed session store. Requires a servlet-based web application that uses Spring Session.</td></tr><tr><td style="text-align:left;"><code>shutdown</code></td><td style="text-align:left;">Lets the application be gracefully shutdown. Only works when using jar packaging. Disabled by default.</td></tr><tr><td style="text-align:left;"><code>startup</code></td><td style="text-align:left;">Shows the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.startup-tracking" target="_blank" rel="noopener noreferrer">startup steps data</a> collected by the <code>ApplicationStartup</code>. Requires the <code>SpringApplication</code> to be configured with a <code>BufferingApplicationStartup</code>.</td></tr><tr><td style="text-align:left;"><code>threaddump</code></td><td style="text-align:left;">Performs a thread dump.</td></tr></tbody></table><p>If your application is a web application (Spring MVC, Spring WebFlux, or Jersey), you can use the following additional endpoints:</p><table><thead><tr><th style="text-align:left;">ID</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>heapdump</code></td><td style="text-align:left;">Returns a heap dump file. On a HotSpot JVM, an <code>HPROF</code>-format file is returned. On an OpenJ9 JVM, a <code>PHD</code>-format file is returned.</td></tr><tr><td style="text-align:left;"><code>logfile</code></td><td style="text-align:left;">Returns the contents of the logfile (if the <code>logging.file.name</code> or the <code>logging.file.path</code> property has been set). Supports the use of the HTTP <code>Range</code> header to retrieve part of the log file’s content.</td></tr><tr><td style="text-align:left;"><code>prometheus</code></td><td style="text-align:left;">Exposes metrics in a format that can be scraped by a Prometheus server. Requires a dependency on <code>micrometer-registry-prometheus</code>.</td></tr></tbody></table><p>默认除了<code>shutdown</code> 端点，其它的端点都启用【enabled】了，但是没有开放、暴露【expose】出来；</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment">## 默认不开启</span></span>
<span class="line"><span class="token key attr-name">management.endpoints.enabled-by-default</span><span class="token punctuation">=</span><span class="token value attr-value">false</span></span>
<span class="line"><span class="token comment">### 开启某个端点</span></span>
<span class="line"><span class="token key attr-name">management.endpoint.info.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认只 expose 了 <code>/actuator/health</code> 端点。可以通过配置去开放其它的端点</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">management</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">web</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">exposure</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="单独配置某个endpoint" tabindex="-1"><a class="header-anchor" href="#单独配置某个endpoint"><span>单独配置某个endpoint</span></a></h5><p>The <code>management.endpoint.&lt;name&gt;</code> prefix uniquely identifies the endpoint that is being configured. 例如：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.endpoint.beans.cache.time-to-live</span><span class="token punctuation">=</span><span class="token value attr-value">10s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="端点信息脱敏" tabindex="-1"><a class="header-anchor" href="#端点信息脱敏"><span>端点信息脱敏</span></a></h5><p>Information returned by the <code>/env</code>, <code>/configprops</code> and <code>/quartz</code> endpoints can be sensitive, so by default values are always fully sanitized (replaced by <code>******</code>).</p><p>The <code>show-values</code> property can be configured for sanitizable endpoints to one of the following values:</p><ul><li><code>NEVER</code> - values are always fully sanitized (replaced by <code>******</code>)</li><li><code>ALWAYS</code> - values are shown to all users (as long as no <code>SanitizingFunction</code> bean applies)</li><li><code>WHEN_AUTHORIZED</code> - values are shown only to authorized users (as long as no <code>SanitizingFunction</code> bean applies)</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.endpoint.env.show-values</span><span class="token punctuation">=</span><span class="token value attr-value">WHEN_AUTHORIZED</span></span>
<span class="line"><span class="token key attr-name">management.endpoint.env.roles</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="health-information" tabindex="-1"><a class="header-anchor" href="#health-information"><span>Health Information</span></a></h5><p>使用这两个配置<code>management.endpoint.health.show-details</code> and <code>management.endpoint.health.show-components</code> 来控制<code>/health</code>端点的信息</p><h6 id="auto-configured-healthindicators" tabindex="-1"><a class="header-anchor" href="#auto-configured-healthindicators"><span>Auto-configured HealthIndicators</span></a></h6><p>You can also enable or disable selected indicators by configuring <code>management.health.key.enabled</code>, with the <code>key</code> listed in the following table:</p><table><thead><tr><th style="text-align:left;">Key</th><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>cassandra</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraDriverHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>CassandraDriverHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Cassandra database is up.</td></tr><tr><td style="text-align:left;"><code>couchbase</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>CouchbaseHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Couchbase cluster is up.</td></tr><tr><td style="text-align:left;"><code>db</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>DataSourceHealthIndicator</code></a></td><td style="text-align:left;">Checks that a connection to <code>DataSource</code> can be obtained.</td></tr><tr><td style="text-align:left;"><code>diskspace</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/DiskSpaceHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>DiskSpaceHealthIndicator</code></a></td><td style="text-align:left;">Checks for low disk space.</td></tr><tr><td style="text-align:left;"><code>elasticsearch</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestClientHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>ElasticsearchRestClientHealthIndicator</code></a></td><td style="text-align:left;">Checks that an Elasticsearch cluster is up.</td></tr><tr><td style="text-align:left;"><code>hazelcast</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/hazelcast/HazelcastHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>HazelcastHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Hazelcast server is up.</td></tr><tr><td style="text-align:left;"><code>influxdb</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/influx/InfluxDbHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>InfluxDbHealthIndicator</code></a></td><td style="text-align:left;">Checks that an InfluxDB server is up.</td></tr><tr><td style="text-align:left;"><code>jms</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jms/JmsHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>JmsHealthIndicator</code></a></td><td style="text-align:left;">Checks that a JMS broker is up.</td></tr><tr><td style="text-align:left;"><code>ldap</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/ldap/LdapHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>LdapHealthIndicator</code></a></td><td style="text-align:left;">Checks that an LDAP server is up.</td></tr><tr><td style="text-align:left;"><code>mail</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mail/MailHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>MailHealthIndicator</code></a></td><td style="text-align:left;">Checks that a mail server is up.</td></tr><tr><td style="text-align:left;"><code>mongo</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/data/mongo/MongoHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>MongoHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Mongo database is up.</td></tr><tr><td style="text-align:left;"><code>neo4j</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>Neo4jHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Neo4j database is up.</td></tr><tr><td style="text-align:left;"><code>ping</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/PingHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>PingHealthIndicator</code></a></td><td style="text-align:left;">Always responds with <code>UP</code>.</td></tr><tr><td style="text-align:left;"><code>rabbit</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/amqp/RabbitHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>RabbitHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Rabbit server is up.</td></tr><tr><td style="text-align:left;"><code>redis</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/data/redis/RedisHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>RedisHealthIndicator</code></a></td><td style="text-align:left;">Checks that a Redis server is up.</td></tr></tbody></table><table><thead><tr><th></th><th>You can disable them all by setting the <code>management.health.defaults.enabled</code> property.</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>Additional <code>HealthIndicators</code> are available but are not enabled by default:</p><table><thead><tr><th style="text-align:left;">Key</th><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>livenessstate</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/availability/LivenessStateHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>LivenessStateHealthIndicator</code></a></td><td style="text-align:left;">Exposes the “Liveness” application availability state.</td></tr><tr><td style="text-align:left;"><code>readinessstate</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/availability/ReadinessStateHealthIndicator.java" target="_blank" rel="noopener noreferrer"><code>ReadinessStateHealthIndicator</code></a></td><td style="text-align:left;">Exposes the “Readiness” application availability state.</td></tr></tbody></table><h6 id="自定义healthindicators" tabindex="-1"><a class="header-anchor" href="#自定义healthindicators"><span>自定义HealthIndicators</span></a></h6><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>health<span class="token punctuation">.</span></span><span class="token class-name">Health</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>health<span class="token punctuation">.</span></span><span class="token class-name">HealthIndicator</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHealthIndicator</span> <span class="token keyword">implements</span> <span class="token class-name">HealthIndicator</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Health</span> <span class="token function">health</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> errorCode <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">Health</span><span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDetail</span><span class="token punctuation">(</span><span class="token string">&quot;Error Code&quot;</span><span class="token punctuation">,</span> errorCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Health</span><span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// perform some specific health check</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The identifier for a given <code>HealthIndicator</code> is the name of the bean without the <code>HealthIndicator</code> prefix, if it exists. In the preceding example, the health information is available in an entry named <code>my</code>.</p></blockquote><h6 id="不同的服务状态与http-code的映射" tabindex="-1"><a class="header-anchor" href="#不同的服务状态与http-code的映射"><span>不同的服务状态与http code的映射</span></a></h6><p>配置：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.endpoint.health.status.http-mapping.down</span><span class="token punctuation">=</span><span class="token value attr-value">503</span></span>
<span class="line"><span class="token key attr-name">management.endpoint.health.status.http-mapping.fatal</span><span class="token punctuation">=</span><span class="token value attr-value">503</span></span>
<span class="line"><span class="token key attr-name">management.endpoint.health.status.http-mapping.out-of-service</span><span class="token punctuation">=</span><span class="token value attr-value">503</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need more control, you can define your own <code>HttpCodeStatusMapper</code> bean.</p><p>The following table shows the default status mappings for the built-in statuses:</p><table><thead><tr><th style="text-align:left;">Status</th><th style="text-align:left;">Mapping</th></tr></thead><tbody><tr><td style="text-align:left;"><code>DOWN</code></td><td style="text-align:left;"><code>SERVICE_UNAVAILABLE</code> (<code>503</code>)</td></tr><tr><td style="text-align:left;"><code>OUT_OF_SERVICE</code></td><td style="text-align:left;"><code>SERVICE_UNAVAILABLE</code> (<code>503</code>)</td></tr><tr><td style="text-align:left;"><code>UP</code></td><td style="text-align:left;">No mapping by default, so HTTP status is <code>200</code></td></tr><tr><td style="text-align:left;"><code>UNKNOWN</code></td><td style="text-align:left;">No mapping by default, so HTTP status is <code>200</code></td></tr></tbody></table><h5 id="application-information" tabindex="-1"><a class="header-anchor" href="#application-information"><span>Application Information</span></a></h5><p>配置<code>/info</code> 端点</p><p>When appropriate, Spring auto-configures the following <code>InfoContributor</code> beans:</p><table><thead><tr><th style="text-align:left;">ID</th><th style="text-align:left;">Name</th><th style="text-align:left;">Description</th><th style="text-align:left;">Prerequisites</th></tr></thead><tbody><tr><td style="text-align:left;"><code>build</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/BuildInfoContributor.java" target="_blank" rel="noopener noreferrer"><code>BuildInfoContributor</code></a></td><td style="text-align:left;">Exposes build information.</td><td style="text-align:left;">A <code>META-INF/build-info.properties</code> resource.</td></tr><tr><td style="text-align:left;"><code>env</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java" target="_blank" rel="noopener noreferrer"><code>EnvironmentInfoContributor</code></a></td><td style="text-align:left;">Exposes any property from the <code>Environment</code> whose name starts with <code>info.</code>.</td><td style="text-align:left;">None.</td></tr><tr><td style="text-align:left;"><code>git</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java" target="_blank" rel="noopener noreferrer"><code>GitInfoContributor</code></a></td><td style="text-align:left;">Exposes git information.</td><td style="text-align:left;">A <code>git.properties</code> resource.</td></tr><tr><td style="text-align:left;"><code>java</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/JavaInfoContributor.java" target="_blank" rel="noopener noreferrer"><code>JavaInfoContributor</code></a></td><td style="text-align:left;">Exposes Java runtime information.</td><td style="text-align:left;">None.</td></tr><tr><td style="text-align:left;"><code>os</code></td><td style="text-align:left;"><a href="https://github.com/spring-projects/spring-boot/tree/v3.2.3/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/OsInfoContributor.java" target="_blank" rel="noopener noreferrer"><code>OsInfoContributor</code></a></td><td style="text-align:left;">Exposes Operating System information.</td><td style="text-align:left;">None.</td></tr></tbody></table><p>Each can be enabled by setting its <code>management.info.&lt;id&gt;.enabled</code> property to <code>true</code></p><h4 id="monitoring-and-management-over-http" tabindex="-1"><a class="header-anchor" href="#monitoring-and-management-over-http"><span>Monitoring and Management Over HTTP</span></a></h4><h5 id="customizing-the-management-endpoint-paths" tabindex="-1"><a class="header-anchor" href="#customizing-the-management-endpoint-paths"><span>Customizing the Management Endpoint Paths</span></a></h5><p>purpose. You can use the <code>management.endpoints.web.base-path</code> property to change the prefix for your management endpoint, as the following example shows:</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.endpoints.web.base-path</span><span class="token punctuation">=</span><span class="token value attr-value">/manage</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want to map endpoints to a different path, you can use the <code>management.endpoints.web.path-mapping</code> property.</p><p>The following example remaps <code>/actuator/health</code> to <code>/healthcheck</code>:</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.endpoints.web.base-path</span><span class="token punctuation">=</span><span class="token value attr-value">/</span></span>
<span class="line"><span class="token key attr-name">management.endpoints.web.path-mapping.health</span><span class="token punctuation">=</span><span class="token value attr-value">healthcheck</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="customizing-the-management-server-port" tabindex="-1"><a class="header-anchor" href="#customizing-the-management-server-port"><span>Customizing the Management Server Port</span></a></h5><p>management 的端口号默认是与<code>management.server.port=8081</code> 配置的是一个端口，但是也可以单独配置</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="configuring-management-specific-ssl" tabindex="-1"><a class="header-anchor" href="#configuring-management-specific-ssl"><span>Configuring Management-specific SSL</span></a></h5><p>When configured to use a custom port, you can also configure the management server with its own SSL by using the various <code>management.server.ssl.*</code> properties.</p><h5 id="customizing-the-management-server-address" tabindex="-1"><a class="header-anchor" href="#customizing-the-management-server-address"><span>Customizing the Management Server Address</span></a></h5><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">management.server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span></span>
<span class="line"><span class="token key attr-name">management.server.address</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当只有端口与应用的端口不同时才可以设置不同的address</p></blockquote><h5 id="disabling-http-endpoints" tabindex="-1"><a class="header-anchor" href="#disabling-http-endpoints"><span>Disabling HTTP Endpoints</span></a></h5><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment">### 其中一个方法都可以</span></span>
<span class="line"><span class="token key attr-name">management.server.port</span><span class="token punctuation">=</span><span class="token value attr-value">-1</span></span>
<span class="line"><span class="token key attr-name">management.endpoints.web.exposure.exclude</span><span class="token punctuation">=</span><span class="token value attr-value">*</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="observability" tabindex="-1"><a class="header-anchor" href="#observability"><span>Observability</span></a></h4><p>todo 实验Observability</p><h4 id="loggers" tabindex="-1"><a class="header-anchor" href="#loggers"><span>Loggers</span></a></h4><p>todo 动态设置日志级别与还原日志</p><p><code>http://localhost:8080/actuator/loggers/com.example.myapp.service</code></p><h3 id="installation-as-a-systemd-service" tabindex="-1"><a class="header-anchor" href="#installation-as-a-systemd-service"><span>Installation as a systemd Service</span></a></h3><p><code>systemd</code> is the successor of the System V init system and is now being used by many modern Linux distributions. Spring Boot applications can be launched by using <code>systemd</code> ‘service’ scripts.</p><p>Assuming that you have a Spring Boot application packaged as an uber jar in <code>/var/myapp</code>, to install it as a <code>systemd</code> service, create a script named <code>myapp.service</code> and place it in <code>/etc/systemd/system</code> directory. The following script offers an example:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[Unit]</span>
<span class="line">Description=myapp</span>
<span class="line">After=syslog.target network.target</span>
<span class="line"></span>
<span class="line">[Service]</span>
<span class="line">User=myapp</span>
<span class="line">Group=myapp</span>
<span class="line"></span>
<span class="line">Environment=&quot;JAVA_HOME=/path/to/java/home&quot;</span>
<span class="line"></span>
<span class="line">ExecStart=\${JAVA_HOME}/bin/java -jar /var/myapp/myapp.jar</span>
<span class="line">ExecStop=/bin/kill -15 $MAINPID</span>
<span class="line">SuccessExitStatus=143</span>
<span class="line"></span>
<span class="line">[Install]</span>
<span class="line">WantedBy=multi-user.target</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>the Description, User, Group, Environment and ExecStart fields for your application.</p></blockquote><p>The user that runs the application, the PID file, and the console log file are managed by <code>systemd</code> itself and therefore must be configured by using appropriate fields in the ‘service’ script. Consult the <a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html" target="_blank" rel="noopener noreferrer">service unit configuration man page</a> for more details.</p><p>To flag the application to start automatically on system boot, use the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ systemctl <span class="token builtin class-name">enable</span> myapp.service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="task-execution-and-scheduling" tabindex="-1"><a class="header-anchor" href="#task-execution-and-scheduling"><span>Task Execution and Scheduling</span></a></h3><p>配置线程池：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">16</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">10s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于常见的8核16G服务器：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># 计算密集型任务</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token value attr-value">8      # CPU核心数</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">16      # CPU核心数 * 2</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">200</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># IO密集型任务</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.core-size</span><span class="token punctuation">=</span><span class="token value attr-value">16     # CPU核心数 * 2</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.max-size</span><span class="token punctuation">=</span><span class="token value attr-value">32      # CPU核心数 * 4</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.queue-capacity</span><span class="token punctuation">=</span><span class="token value attr-value">500</span></span>
<span class="line"><span class="token key attr-name">spring.task.execution.pool.keep-alive</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用java 21+后，开启虚拟线程就可以不需要配置这些</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spring.threads.virtual.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>todo</span></a></h3><p>https://docs.spring.io/spring-boot/reference/features/developing-auto-configuration.html</p>`,284)]))}const c=a(o,[["render",i],["__file","spingboot-3.x.html.vue"]]),r=JSON.parse('{"path":"/Backend/java/spring/spingboot-3.x.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"upgrade 2.x to 3.x","slug":"upgrade-2-x-to-3-x","link":"#upgrade-2-x-to-3-x","children":[]},{"level":3,"title":"Spring base","slug":"spring-base","link":"#spring-base","children":[]},{"level":3,"title":"Spring MVC","slug":"spring-mvc","link":"#spring-mvc","children":[]},{"level":3,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":3,"title":"i18n","slug":"i18n","link":"#i18n","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":3,"title":"自定义自动配置","slug":"自定义自动配置","link":"#自定义自动配置","children":[]},{"level":3,"title":"Actuator 模块","slug":"actuator-模块","link":"#actuator-模块","children":[]},{"level":3,"title":"Installation as a systemd Service","slug":"installation-as-a-systemd-service","link":"#installation-as-a-systemd-service","children":[]},{"level":3,"title":"Task Execution and Scheduling","slug":"task-execution-and-scheduling","link":"#task-execution-and-scheduling","children":[]},{"level":3,"title":"todo","slug":"todo","link":"#todo","children":[]}],"git":{"updatedTime":1745985284000,"contributors":[{"name":"RuanCong","username":"RuanCong","email":"1308811723@qq.com","commits":5,"url":"https://github.com/RuanCong"}]},"filePathRelative":"Backend/java/spring/spingboot-3.x.md"}');export{c as comp,r as data};
