import{_ as e,c as n,a as l,o as i}from"./app-CM5yRpI6.js";const s={};function r(t,a){return i(),n("div",null,a[0]||(a[0]=[l(`<h1 id="分布式系统中的脑裂-split-brain-现象" tabindex="-1"><a class="header-anchor" href="#分布式系统中的脑裂-split-brain-现象"><span>分布式系统中的脑裂（Split-Brain）现象</span></a></h1><h3 id="什么是脑裂" tabindex="-1"><a class="header-anchor" href="#什么是脑裂"><span>什么是脑裂？</span></a></h3><p>脑裂是分布式系统中的一个经典问题，指因网络分区或其他原因导致集群分裂成两个或多个部分，各个部分都认为自己是主节点或活跃节点的情况。这就像一个大脑分裂成了多个互不通信的部分，每个部分都认为自己是在控制整个身体。</p><h3 id="在-docker-swarm-中的脑裂场景" tabindex="-1"><a class="header-anchor" href="#在-docker-swarm-中的脑裂场景"><span>在 Docker Swarm 中的脑裂场景</span></a></h3><p>假设有一个 4 节点的 Swarm 管理节点集群：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Manager1 &lt;--&gt; Manager2</span>
<span class="line">    ↑          ↑</span>
<span class="line">    ↓          ↓  </span>
<span class="line">Manager3 &lt;--&gt; Manager4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发生网络分区，可能会出现这种情况：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">分区 A:               分区 B:</span>
<span class="line">Manager1 Manager2     Manager3 Manager4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时：</p><ol><li>两个分区都可能选出自己的 leader</li><li>两个分区都认为自己是合法的管理集群</li><li>可能会对同一个服务做出冲突的决策</li></ol><h3 id="为什么要使用奇数个管理节点" tabindex="-1"><a class="header-anchor" href="#为什么要使用奇数个管理节点"><span>为什么要使用奇数个管理节点？</span></a></h3><p>使用奇数个管理节点（比如3或5个）的原因：</p><ol><li><p><strong>仲裁机制</strong>：</p><ul><li>Swarm 使用 Raft 共识算法，需要超过半数（N/2 + 1）的节点达成一致才能做出决策</li><li>3个节点的集群可以容忍1个节点失败</li><li>5个节点的集群可以容忍2个节点失败</li></ul></li><li><p><strong>避免平票</strong>：</p><ul><li>2个节点：如果分区，每边都是1个节点，无法达到多数</li><li>4个节点：如果分成2-2分区，也无法达到多数</li><li>3个节点：即使发生分区，总有一边能达到多数（2个节点）</li></ul></li></ol><h3 id="实例说明" tabindex="-1"><a class="header-anchor" href="#实例说明"><span>实例说明</span></a></h3><p>以3节点集群为例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">正常情况：</span>
<span class="line">Manager1 &lt;--&gt; Manager2 &lt;--&gt; Manager3</span>
<span class="line">(需要2个节点同意才能做出决策)</span>
<span class="line"></span>
<span class="line">发生网络分区后：</span>
<span class="line">分区 A: Manager1 Manager2  (可以做出决策，因为有2个节点)</span>
<span class="line">分区 B: Manager3           (无法做出决策，因为只有1个节点)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即使发生网络分区：</p><ul><li>只有具有多数节点的分区能继续工作</li><li>少数节点的分区会进入只读状态</li><li>避免了脑裂带来的数据不一致问题</li></ul><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><ol><li>使用3个或5个管理节点（不建议更多，因为会增加通信开销）</li><li>将管理节点分布在不同的可用区，提高容灾能力</li><li>确保管理节点之间的网络连接可靠</li><li>监控节点状态，及时处理异常</li></ol><p>这就是为什么 Docker Swarm 建议使用奇数个管理节点的重要原因 - 它能有效防止脑裂问题，保证集群的一致性和可用性。</p>`,21)]))}const p=e(s,[["render",r],["__file","split-brain.html.vue"]]),c=JSON.parse('{"path":"/Backend/docker/split-brain.html","title":"分布式系统中的脑裂（Split-Brain）现象","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"什么是脑裂？","slug":"什么是脑裂","link":"#什么是脑裂","children":[]},{"level":3,"title":"在 Docker Swarm 中的脑裂场景","slug":"在-docker-swarm-中的脑裂场景","link":"#在-docker-swarm-中的脑裂场景","children":[]},{"level":3,"title":"为什么要使用奇数个管理节点？","slug":"为什么要使用奇数个管理节点","link":"#为什么要使用奇数个管理节点","children":[]},{"level":3,"title":"实例说明","slug":"实例说明","link":"#实例说明","children":[]},{"level":3,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"updatedTime":1736306667000,"contributors":[{"name":"RuanCong","username":"RuanCong","email":"1308811723@qq.com","commits":1,"url":"https://github.com/RuanCong"}]},"filePathRelative":"Backend/docker/split-brain.md"}');export{p as comp,c as data};
