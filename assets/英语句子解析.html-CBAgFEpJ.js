import{_ as l,c as i,a as s,o as t}from"./app-BgnsxkLN.js";const n={};function a(o,e){return t(),i("div",null,e[0]||(e[0]=[s(`<h3 id="_1" tabindex="-1"><a class="header-anchor" href="#_1"><span>1</span></a></h3><ul><li><p><strong>React Router embraces this convention with APIs for creating nested layouts coupled to URL segments and data.</strong></p><p>句子的语法结构：</p><ol><li>主语：React Router</li><li>谓语动词：embraces (拥抱，采用)</li><li>宾语：this convention (这个惯例)</li><li>介词短语（作为方式补语）：with APIs</li><li>APIs的修饰语： <ul><li>for creating nested layouts</li><li>coupled to URL segments and data</li></ul></li></ol><p>进一步分解：</p><ul><li>&quot;creating nested layouts&quot; 是现在分词短语，作为APIs的目的说明</li><li>&quot;coupled to URL segments and data&quot; 是过去分词短语，作为layouts的状态描述</li><li>&quot;URL segments and data&quot; 是并列结构，通过 &quot;and&quot; 连接</li></ul><p>如果用树状结构表示，这个句子可以这样分解：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CopyReact Router embraces this convention</span>
<span class="line">                └── with APIs</span>
<span class="line">                    ├── for creating nested layouts</span>
<span class="line">                    └── coupled to</span>
<span class="line">                        ├── URL segments</span>
<span class="line">                        └── data</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2" tabindex="-1"><a class="header-anchor" href="#_2"><span>2</span></a></h3><ul><li><p><strong>Most web apps have persistent navigation sections at the top of the UI, the sidebar, and often multiple levels.</strong></p><p>句子的语法结构：</p><ol><li>主语：Most web apps (大多数网络应用)</li><li>谓语动词：have (拥有)</li><li>宾语：persistent navigation sections (持久的导航部分)，后面有三个位置介词短语修饰： <ul><li>at the top of the UI</li><li>[at] the sidebar</li><li>[and] often [at] multiple levels</li></ul></li></ol><p>这里使用了并列结构和省略：</p><ul><li>&quot;at&quot; 在 &quot;the sidebar&quot; 前被省略</li><li>&quot;at&quot; 在 &quot;multiple levels&quot; 前也被省略</li><li>使用 &quot;and&quot; 连接最后一个元素</li></ul><p>如果用树状结构表示：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CopyMost web apps have persistent navigation sections</span>
<span class="line">                └── at the top of the UI</span>
<span class="line">                └── [at] the sidebar</span>
<span class="line">                └── and often [at] multiple levels</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3" tabindex="-1"><a class="header-anchor" href="#_3"><span>3</span></a></h3><ul><li><strong>It gives you the UX capabilities of client rendered apps with the simplicity of the &quot;old school&quot; web model.</strong></li></ul><p>句子的语法结构：</p><ol><li>主语：It (它)</li><li>谓语动词：gives (给予)</li><li>宾语：you the UX capabilities of client rendered apps (你获得客户端渲染应用的UX能力)</li><li>介词短语（作为方式补语）：with the simplicity of the &quot;old school&quot; web model (使用&quot;旧式&quot;网络模型的简单性)</li></ol><h3 id="_4" tabindex="-1"><a class="header-anchor" href="#_4"><span>4</span></a></h3><ul><li><p><strong>Site replication configures multiple independent MinIO deployments as a cluster of replicas called peer sites.</strong></p><p>句子的语法结构：</p><ol><li>主语：Site replication (站点复制)</li><li>谓语动词：configures (配置)</li><li>宾语：multiple independent MinIO deployments (多个独立的MinIO部署)</li><li>介词短语（作为方式补语）：as a cluster of replicas (作为一组副本的集群)</li><li>名词短语（作为宾语补语）：called peer sites (称为对等站点)</li></ol></li></ul><h3 id="_5" tabindex="-1"><a class="header-anchor" href="#_5"><span>5</span></a></h3><ul><li><p><strong>This allows a site that is healing or lagging behind other peers to still return an object persisted to other sites.</strong></p><p>句子的语法结构：</p><ol><li>主语：This (这)</li><li>谓语动词：allows (允许)</li><li>宾语：a site that is healing or lagging behind other peers (一个正在恢复或落后于其他对等站点的站点)</li><li>介词短语（作为方式补语）：to still return an object persisted to other sites (仍然返回持久化到其他站点的对象)</li></ol><blockquote><p>persisted to other sites 是过去分词短语，修饰 &quot;object&quot;，表示该对象已经持久化到其他站点。</p></blockquote><p>句子的语法结构： 这是一个复合句，由从句（While引导的让步状语从句）和主句组成。</p><p>让步状语从句部分：</p><ol><li>从句连接词：While (虽然)</li><li>从句主语：each pool (每个池)</li><li>从句谓语动词：is (是)</li><li>从句表语：an independent set of servers (一组独立的服务器)</li><li>从句修饰语：with distinct erasure sets for availability <ul><li>with引导的介词短语，表示伴随状态</li><li>distinct erasure sets 是介词宾语</li><li>for availability 是目的状语</li></ul></li></ol><p>主句部分：</p><ol><li>主句主语：the complete loss of one pool (一个池的完全损失)</li><li>主句谓语动词：results in (导致)</li><li>主句宾语：MinIO stopping I/O (MinIO停止I/O)</li><li>主句修饰语：for all pools in the deployment <ul><li>for all pools 表示影响范围</li><li>in the deployment 表示位置</li></ul></li></ol></li></ul><h3 id="_6" tabindex="-1"><a class="header-anchor" href="#_6"><span>6</span></a></h3><ul><li><p><strong>While each pool is an independent set of servers with distinct erasure sets for availability, the complete loss of one pool results in MinIO stopping I/O for all pools in the deployment.</strong></p><p>句子的语法结构： 这是一个复合句，由从句（While引导的让步状语从句）和主句组成。</p><p>让步状语从句部分：</p><ol><li>从句连接词：While (虽然)</li><li>从句主语：each pool (每个池)</li><li>从句谓语动词：is (是)</li><li>从句表语：an independent set of servers (一组独立的服务器)</li><li>从句修饰语：with distinct erasure sets for availability <ul><li>with引导的介词短语，表示伴随状态</li><li>distinct erasure sets 是介词宾语</li><li>for availability 是目的状语</li></ul></li></ol><p>主句部分：</p><ol><li>主句主语：the complete loss of one pool (一个池的完全损失)</li><li>主句谓语动词：results in (导致)</li><li>主句宾语：MinIO stopping I/O (MinIO停止I/O)</li><li>主句修饰语：for all pools in the deployment <ul><li>for all pools 表示影响范围</li><li>in the deployment 表示位置</li></ul></li></ol><p>如果用树状结构表示：</p></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> While each pool is an independent set of servers</span>
<span class="line"> └── with distinct erasure sets</span>
<span class="line"> └── for availability</span>
<span class="line"> ,</span>
<span class="line"> the complete loss of one pool results in MinIO stopping I/O</span>
<span class="line"> └── for all pools</span>
<span class="line"> └── in the deployment </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7" tabindex="-1"><a class="header-anchor" href="#_7"><span>7</span></a></h3><ul><li><strong>Bit rot corruption is not prompted by any activity from a user, nor does the system’s operating system alone have awareness of the corruption to notify a user or administrator about a change to the data.</strong></li></ul><p>整个句子的语法结构是一个<strong>并列复合句</strong>，由两部分通过 <strong>nor</strong> 连接，分别强调：</p><ul><li>位腐败并不是由用户活动引起的。any activity from a user</li><li>操作系统也没有意识到腐败并且没有相应的通知机制。</li><li><strong>nor</strong>：这是一个并列连词，连接两个否定的句子部分。它的作用是表示“也不”，在此处表示“操作系统也没有意识到这种腐败”。</li><li><strong>does... have awareness</strong>：这是反转语序，通常句子的正常顺序是“the operating system alone has awareness”，但是在这个并列句中，为了保持语气的对称和强调，使用了倒装结构“does have”。</li><li>notify...about... 表示通知...关于...</li><li>change to the data 表示数据的变化</li></ul><p>这个句子采用了倒装语序（&quot;nor does&quot;）和一些强调成分（&quot;alone&quot;）来突出重点，结构上比较正式。</p><h3 id="_8" tabindex="-1"><a class="header-anchor" href="#_8"><span>8</span></a></h3><ul><li><strong>Storage controllers should present XFS-formatted drives in “Just a Bunch of Drives” (JBOD) configurations with no RAID, pooling, or other hardware/software resiliency layers. MinIO recommends against caching, either at the drive or the controller layer. Either type of caching can cause I/O spikes as the cache fills and clears, resulting in unpredictable performance.</strong></li></ul><ul><li>保持JBOD配置，没有RAID、池化或其他硬件/软件弹性层。</li><li>MinIO建议不进行缓存，无论是驱动器层还是控制器层。</li><li>任何类型的缓存都可能导致I/O峰值，因为缓存填充和清除【在缓存填充与清除时】，导致性能不可预测。</li></ul>`,23)]))}const p=l(n,[["render",a],["__file","英语句子解析.html.vue"]]),d=JSON.parse('{"path":"/English/English-grammar/%E8%8B%B1%E8%AF%AD%E5%8F%A5%E5%AD%90%E8%A7%A3%E6%9E%90.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1","slug":"_1","link":"#_1","children":[]},{"level":3,"title":"2","slug":"_2","link":"#_2","children":[]},{"level":3,"title":"3","slug":"_3","link":"#_3","children":[]},{"level":3,"title":"4","slug":"_4","link":"#_4","children":[]},{"level":3,"title":"5","slug":"_5","link":"#_5","children":[]},{"level":3,"title":"6","slug":"_6","link":"#_6","children":[]},{"level":3,"title":"7","slug":"_7","link":"#_7","children":[]},{"level":3,"title":"8","slug":"_8","link":"#_8","children":[]}],"git":{"updatedTime":1740462056000,"contributors":[{"name":"RuanCong","username":"RuanCong","email":"1308811723@qq.com","commits":5,"url":"https://github.com/RuanCong"}]},"filePathRelative":"English/English-grammar/英语句子解析.md"}');export{p as comp,d as data};
